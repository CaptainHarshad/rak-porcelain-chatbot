-- Migration: 001_create_tables.sql
-- Description: Create RAG-ready database tables for RAK Porcelain chatbot
-- Created: 2024

-- Enable required extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "vector";

-- IMPORTANT: Run this AFTER you set OPENAI_EMBED_DIM to the embedding dimension you will use.
-- Example default dimension: 1536 (adjust if you use a different OpenAI embedding model).
-- Replace 1536 with your actual OPENAI_EMBED_DIM before running this migration.

-- Create products table
CREATE TABLE products (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(255) NOT NULL,
    description TEXT,
    category VARCHAR(100),
    sku VARCHAR(100) UNIQUE,
    price DECIMAL(10,2),
    specifications JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Create product_images table
CREATE TABLE product_images (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    product_id UUID REFERENCES products(id) ON DELETE CASCADE,
    image_url TEXT NOT NULL,
    alt_text VARCHAR(255),
    is_primary BOOLEAN DEFAULT false,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Create embeddings table with pgvector
CREATE TABLE embeddings (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    product_id UUID REFERENCES products(id) ON DELETE CASCADE,
    source_type TEXT NOT NULL, -- 'description', 'faq', 'document', 'specification'
    source_id UUID, -- reference to specific document or FAQ
    embedding VECTOR(1536), -- CHANGE this number to match OPENAI_EMBED_DIM before running migrations
    text_snippet TEXT NOT NULL,
    metadata JSONB, -- additional metadata like chunk index, page number, etc.
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Create conversations table for chat history
CREATE TABLE conversations (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    session_id VARCHAR(255) NOT NULL,
    user_message TEXT NOT NULL,
    assistant_response TEXT NOT NULL,
    retrieved_docs JSONB, -- store the retrieved documents for this conversation
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Create indexes for better performance
CREATE INDEX idx_products_category ON products(category);
CREATE INDEX idx_products_sku ON products(sku);
CREATE INDEX idx_product_images_product_id ON product_images(product_id);
CREATE INDEX idx_embeddings_product_id ON embeddings(product_id);
CREATE INDEX idx_embeddings_source_type ON embeddings(source_type);
CREATE INDEX idx_conversations_session_id ON conversations(session_id);
CREATE INDEX idx_conversations_created_at ON conversations(created_at);

-- Create vector similarity index for embeddings
CREATE INDEX idx_embeddings_embedding ON embeddings USING ivfflat (embedding) WITH (lists = 100);

-- Create updated_at trigger function
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create triggers for updated_at
CREATE TRIGGER update_products_updated_at BEFORE UPDATE ON products
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Create function for vector similarity search
CREATE OR REPLACE FUNCTION match_embeddings(
    query_embedding DOUBLE PRECISION[],
    match_count INTEGER DEFAULT 5
)
RETURNS TABLE (
    product_id UUID,
    source_type TEXT,
    source_id UUID,
    text_snippet TEXT,
    similarity DOUBLE PRECISION,
    metadata JSONB
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        e.product_id,
        e.source_type,
        e.source_id,
        e.text_snippet,
        GREATEST(0, LEAST(1, 1 - (e.embedding <#> query_embedding::vector))) AS similarity,
        e.metadata
    FROM embeddings e
    ORDER BY e.embedding <-> query_embedding::vector
    LIMIT match_count;
END;
$$ LANGUAGE plpgsql;

-- Insert sample product data for testing
INSERT INTO products (name, description, category, sku, price, specifications) VALUES
('RAK Porcelain Dinner Set', 'Elegant 12-piece dinner set with hand-painted gold accents', 'Dinnerware', 'RAK-DS-001', 299.99, '{"pieces": 12, "material": "porcelain", "colors": ["white", "gold"], "dishwasher_safe": true}'),
('RAK Porcelain Tea Set', 'Traditional 6-piece tea set perfect for afternoon tea', 'Tea Sets', 'RAK-TS-001', 199.99, '{"pieces": 6, "material": "porcelain", "colors": ["white", "blue"], "microwave_safe": true}'),
('RAK Porcelain Vase', 'Handcrafted decorative vase with intricate patterns', 'Decorative', 'RAK-V-001', 89.99, '{"height": "12 inches", "material": "porcelain", "colors": ["white", "gold"], "handmade": true}');

-- Insert sample embeddings (these would normally be generated by the ingestion script)
-- For now, we'll insert placeholder embeddings that will be replaced during actual ingestion
INSERT INTO embeddings (product_id, source_type, text_snippet, embedding, metadata) 
SELECT 
    p.id,
    'description',
    p.description,
    ARRAY_FILL(0.0, ARRAY[1536])::vector, -- placeholder embedding
    '{"chunk_index": 0, "is_placeholder": true}'::jsonb
FROM products p
WHERE p.description IS NOT NULL;
